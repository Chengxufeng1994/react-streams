{"version":3,"sources":["history.js","apis/streams.js","actions/index.js","actions/types.js","components/GoogleAuth.js","components/Header.js","components/streams/StreamList.js","components/streams/StreamForm.js","components/streams/StreamCreate.js","components/streams/StreamEdit.js","components/Modal.js","components/streams/StreamDelete.js","components/streams/StreamShow.js","components/App.js","reducers/authReducer.js","reducers/streamReducer.js","reducers/index.js","index.js"],"names":["createBrowserHistory","axios","create","baseURL","fetchStream","id","dispatch","a","streams","get","response","type","payload","data","GoogleAuth","onAuthChange","isSignedIn","props","signIn","auth","currentUser","getId","signOut","onSignInClick","onSignOutClick","window","gapi","load","client","init","clientId","scope","then","auth2","getAuthInstance","listen","this","className","onClick","renderAuthButton","Component","connect","state","userId","Header","to","StreamList","fetchStreams","stream","currentUserId","style","textAlign","map","key","renderAdmin","title","description","renderList","renderCreate","Object","values","StreamForm","renderInput","input","label","meta","autoComplete","renderError","onSubmit","formValues","error","touched","handleSubmit","Field","component","name","reduxForm","form","validate","errors","StreamCreate","createStream","getState","post","history","push","StreamEdit","editStream","match","params","console","log","initialValues","_","pick","React","ownProps","patch","Modal","ReactDOM","createPortal","onDismiss","event","stopPropagation","content","actions","document","querySelector","StreamDelete","renderActions","Fragment","deleteStream","renderContent","delete","StreamShow","videoRef","createRef","buildPlayer","player","destroy","flv","createPlayer","url","attachMediaElement","current","ref","width","controls","App","exact","path","INTIAL_STTE","combineReducers","action","formReducer","mapKeys","omit","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","render"],"mappings":"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","file":"static/js/main.7f2f6952.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\nexport default createBrowserHistory();","import axios from \"axios\"\r\n\r\nexport default axios.create({\r\n    baseURL: \"http://localhost:3001\"\r\n})","import {\r\n    SIGN_IN,\r\n    SIGN_OUT,\r\n    CREATE_STREAM,\r\n    FETCH_STREAMS,\r\n    FETCH_STREAM,\r\n    DELETE_STREAM,\r\n    EDIT_STREAM,\r\n} from \"./types\"\r\n\r\nimport history from \"../history\"\r\n\r\nimport streams from \"../apis/streams\"\r\n\r\n// Action Creators\r\nexport const signIn = (userId) => {\r\n    // return action\r\n    return {\r\n        type: SIGN_IN,\r\n        payload: userId\r\n    }\r\n}\r\n\r\nexport const signOut = () => {\r\n    return {\r\n        type: SIGN_OUT\r\n    }\r\n}\r\n// 這個 action 內先做 fetch，等拿到資料後，再 dispatch 結果給 reducers 來完成\r\nexport const createStream = (formValues) => async (dispatch, getState) => {\r\n    // getState 回傳你的應用程式當下的 state tree。 這等同於 store 的 reducer 最後一次回傳的值。\r\n    const {\r\n        userId\r\n    } = getState().auth;\r\n    const response = await streams.post(\"/streams\", {\r\n        ...formValues,\r\n        userId\r\n    });\r\n\r\n    dispatch({\r\n        type: CREATE_STREAM,\r\n        payload: response.data\r\n    });\r\n    // Do some programatic navigation to get\r\n    // the user back to the root route\r\n    history.push(\"/\")\r\n}\r\n\r\nexport const fetchStreams = () => async dispatch => {\r\n    const response = await streams.get(\"/streams\")\r\n\r\n    dispatch({\r\n        type: FETCH_STREAMS,\r\n        payload: response.data\r\n    })\r\n}\r\n\r\nexport const fetchStream = (id) => async dispatch => {\r\n    const response = await streams.get(`/streams/${id}`)\r\n\r\n    dispatch({\r\n        type: FETCH_STREAM,\r\n        payload: response.data\r\n    })\r\n}\r\n\r\nexport const editStream = (id, formValues) => async dispatch => {\r\n    const response = await streams.patch(`/streams/${id}`, formValues)\r\n\r\n    dispatch({\r\n        type: EDIT_STREAM,\r\n        payload: response.data\r\n    })\r\n    history.push(\"/\")\r\n}\r\n\r\nexport const deleteStream = (id) => async dispatch => {\r\n    await streams.delete(`/streams/${id}`);\r\n\r\n    dispatch({\r\n        type: DELETE_STREAM,\r\n        payload: id\r\n    })\r\n    history.push(\"/\")\r\n}","export const SIGN_IN = \"SIGN_IN\";\r\nexport const SIGN_OUT = \"SIGN_OUT\";\r\nexport const CREATE_STREAM = \"CREATE_STREAM\";\r\nexport const FETCH_STREAMS = \"FETCH_STREAMS\";\r\nexport const FETCH_STREAM = \"FETCH_STREAM\";\r\nexport const DELETE_STREAM = \"DELETE_STREAM\";\r\nexport const EDIT_STREAM = \"EDIT_STREAM\";","import React, { Component } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { signIn, signOut } from \"../actions\"\r\n\r\nclass GoogleAuth extends Component {\r\n    componentDidMount() {\r\n        // 加載client和auth2\r\n        window.gapi.load(\"client:auth2\", () => {\r\n            // 初始化JavaScript client with API key, OAuth client ID, scope, and API discovery document(s)\r\n            // 如果提供了OAuth客戶端ID和作用域，則此函數將加載gapi.auth2模塊以執行OAuth。\r\n            // 請注意，不能多次提供scope和clientId參數，因為gapi.auth2模塊只能初始化一次。\r\n            window.gapi.client.init({\r\n                clientId: \"168950547329-al7f1q440uo13h348faubo4q0b12cgu7.apps.googleusercontent.com\",\r\n                scope: \"email\"\r\n            }).then(() => {\r\n                // 令auth為gapi.auth2.getAuthInstance\r\n                this.auth = window.gapi.auth2.getAuthInstance();\r\n                // this.auth.isSignedIn.get()確認是否登入\r\n                this.onAuthChange(this.auth.isSignedIn.get());\r\n                // A function that takes a boolean value. \r\n                // listen() passes true to this function when the user signs in, and false when the user signs out.\r\n                this.auth.isSignedIn.listen(this.onAuthChange);\r\n            })\r\n        })\r\n    };\r\n\r\n    // arrow func\r\n    // 在react-redux的這發送動作(dispatch action)，它是自動幫你作的，\r\n    // 也就是說你如果用react-redux綁住(連接)好Redux與React後，\r\n    // 只要呼叫Action Creator的函式，就會作發送動作(dispatch action)，\r\n    // 不需要像之前的範例中，要呼叫store.dispatch(action)這樣。\r\n    onAuthChange = isSignedIn => {\r\n        if (isSignedIn) {\r\n            this.props.signIn(this.auth.currentUser.get().getId());\r\n        } else {\r\n            this.props.signOut();\r\n        }\r\n    };\r\n\r\n    onSignInClick = () => {\r\n        // 將帳號登入\r\n        this.auth.signIn()\r\n    }\r\n\r\n    onSignOutClick = () => {\r\n        // 將帳號登出\r\n        this.auth.signOut()\r\n    }\r\n\r\n    renderAuthButton() {\r\n        if (this.props.isSignedIn === null) {\r\n            return null;\r\n        } else if (this.props.isSignedIn) {\r\n            return (\r\n                <button className=\"ui red google button\" onClick={this.onSignOutClick}>\r\n                    <i className=\"google icon\" />\r\n                    Sign Out\r\n                </button>\r\n            );\r\n        } else {\r\n            return (\r\n                <button className=\"ui blue google button\" onClick={this.onSignInClick}>\r\n                    <i className=\"google icon\" />\r\n                    Sign In with Google\r\n            </button>\r\n            );\r\n        };\r\n    };\r\n\r\n    render() {\r\n        // console.log(this.props)\r\n        return (\r\n            <div>{this.renderAuthButton()}</div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    // console.log(state)\r\n    return {\r\n        isSignedIn: state.auth.isSignedIn,\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    // 輸入 將store中的state轉成props輸入\r\n    mapStateToProps,\r\n    // 輸出 將action作為props綁定到view，以此操作類型dispatch\r\n    { signIn, signOut }\r\n)(GoogleAuth);","import React from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\nimport GoogleAuth from \"./GoogleAuth\"\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"ui secondary pointing menu\">\r\n            <Link to=\"/\" className=\"item\">\r\n                Streamy\r\n            </Link>\r\n            <div className=\"right menu\">\r\n                <Link to=\"/\" className=\"item\">\r\n                    All Streams\r\n                </Link>\r\n                <GoogleAuth />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { fetchStreams } from \"../../actions\";\r\n\r\nclass StreamList extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchStreams()\r\n    }\r\n\r\n    renderAdmin(stream) {\r\n        // console.log(stream)\r\n        if (stream.userId === this.props.currentUserId) {\r\n            return (\r\n                <div className=\"right floated content\">\r\n                    <Link to={`/streams/edit/${stream.id}`} className=\"ui button primary\">\r\n                        Edit\r\n                    </Link>\r\n                    <Link to={`/streams/delete/${stream.id}`} className=\"ui button negative\">\r\n                        Delete\r\n                    </Link>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    renderCreate() {\r\n        if (this.props.isSignedIn) {\r\n            return (\r\n                // 靠右對齊\r\n                <div style={{ textAlign: \"right\" }}>\r\n                    {/* 建立一個create stream連結 */}\r\n                    <Link to=\"/streams/new\" className=\"ui button primary\">\r\n                        Create Stream\r\n                    </Link>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderList() {\r\n        return this.props.streams.map(stream => {\r\n            return (\r\n                <div className=\"item\" key={stream.id}>\r\n                    {this.renderAdmin(stream)}\r\n                    <i className=\"large middle aligned icon camera\" />\r\n                    <div className=\"content\">\r\n                        <Link to={`/streams/${stream.id}`}>\r\n                            {/* 跳轉到streamShow頁面 */}\r\n                            {stream.title}\r\n                        </Link>\r\n                        <div className=\"description\">\r\n                            {stream.description}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Streams</h2>\r\n                <div className=\"ui celled list\">\r\n                    {this.renderList()}\r\n                </div>\r\n                {this.renderCreate()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        // Object.values return array\r\n        // Object.values 這個方法可以將 object 轉為 array\r\n        streams: Object.values(state.streams),\r\n        currentUserId: state.auth.userId,\r\n        isSignedIn: state.auth.isSignedIn,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchStreams })(StreamList)","import React, { Component } from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nclass StreamForm extends Component {\r\n    // touched 是否點擊輸入欄，回傳true or false\r\n    renderError({ error, touched }) {\r\n        if (touched && error) {\r\n            return (\r\n                <div className=\"ui error message\">\r\n                    <div className=\"header\">{error}</div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderInput = ({ input, label, meta }) => {\r\n        // console.log({ input, label })\r\n        // console.log(meta)\r\n        return (\r\n            <div className=\"field\">\r\n                <label>{label}</label>\r\n                <input {...input} autoComplete=\"off\" />\r\n                {this.renderError(meta)}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    onSubmit = (formValues) => {\r\n        this.props.onSubmit(formValues)\r\n    }\r\n\r\n    render() {\r\n        // Redux Form 其實並不會預設轉變為一個 <input> 或 <textarea> 之類，\r\n        // 我們要自己去將它加上 component 。\r\n        // console.log(this.props)\r\n        return (\r\n            <form\r\n                className=\"ui form error\"\r\n                onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n            >\r\n                <Field\r\n                    component={this.renderInput}\r\n                    label=\"Enter Title\"\r\n                    name=\"title\"\r\n                />\r\n                <Field\r\n                    component={this.renderInput}\r\n                    label=\"Enter Description\"\r\n                    name=\"description\"\r\n                />\r\n                <button className=\"ui button primary\">Submit</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nconst validate = (formValues) => {\r\n\r\n    const errors = {}\r\n    // console.log(formValues)\r\n    if (!formValues.title) {\r\n        errors.title = \"You must enter a title\"\r\n    }\r\n\r\n    if (!formValues.description) {\r\n        errors.description = \"You must enter a description\"\r\n    }\r\n    return errors;\r\n}\r\n\r\n// 241. Creating a Stream with REST Conventions\r\n// 為了使用connect須將以下程式碼進行修改\r\n\r\n// 方法一\r\n// export default connect()(reduxForm({\r\n//     form: \"streamCreate\",  // 你的表單組件的特殊標記\r\n//     validate\r\n// })(StreamCreate));  // 這裏的StreamCreate是你寫的表單組件\r\n\r\n// 方法二\r\nexport default reduxForm({\r\n    form: \"streamForm\",  // 你的表單組件的特殊標記\r\n    validate\r\n})(StreamForm);  // 這裏的StreamCreate是你寫的表單組件\r\n\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStream } from \"../../actions\"\r\nimport StreamForm from \"./StreamForm\"\r\n\r\nclass StreamCreate extends Component {\r\n    onSubmit = (formValues) => {\r\n        this.props.createStream(formValues)\r\n    }\r\n\r\n    render() {\r\n        // Redux Form 其實並不會預設轉變為一個 <input> 或 <textarea> 之類，\r\n        // 我們要自己去將它加上 component 。\r\n        // console.log(this.props)\r\n        return (\r\n            <div>\r\n                <h3>Create a Stream</h3>\r\n                <StreamForm onSubmit={this.onSubmit} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 241. Creating a Stream with REST Conventions\r\n// 為了使用connect須將以下程式碼進行修改\r\n\r\n// 方法一\r\n// export default connect()(reduxForm({\r\n//     form: \"streamCreate\",  // 你的表單組件的特殊標記\r\n//     validate\r\n// })(StreamCreate));  // 這裏的StreamCreate是你寫的表單組件\r\n\r\nexport default connect(null, { createStream })(StreamCreate)\r\n","import _ from \"lodash\"\r\nimport React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { fetchStream, editStream } from \"../../actions\"\r\nimport StreamForm from \"./StreamForm\"\r\n\r\nclass StreamEdit extends React.Component {\r\n    // 有時候有些 state 的值沒有一開始出現，但有時會出現，這是因為 Redux 還沒 load 到其他 components 的資料，\r\n    // 為了避免這個狀況，我們可以事先呼叫我們需要的 action 來準備好 state。\r\n    componentDidMount() {\r\n        this.props.fetchStream(this.props.match.params.id)\r\n    }\r\n\r\n    onSubmit = (formValues) => {\r\n        this.props.editStream(this.props.match.params.id, formValues)\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props)\r\n        if (!this.props.stream) {\r\n            return (\r\n                <div>\r\n                    Loading...\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h3>Edit a Stream</h3>\r\n                <StreamForm\r\n                    // 如果我們想要從一個 object 只過濾出幾個特定的 key，可以用 lodash 的 _.pick() 方法\r\n                    initialValues={_.pick(this.props.stream, 'title', 'description')}\r\n                    onSubmit={this.onSubmit}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    console.log(ownProps)\r\n    return {\r\n        stream: state.streams[ownProps.match.params.id]\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchStream, editStream })(StreamEdit)","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n// ReactDOM.createPortal(child, container)\r\n\r\nconst Modal = props => {\r\n    return ReactDOM.createPortal(\r\n        // 其中第一個參數 child 是你要渲染的 React 元素，\r\n        // 第二個參數 container 則是要被掛載到哪一個 DOM 元素上。\r\n        <div\r\n            onClick={props.onDismiss}\r\n            className=\"ui dimmer modals visible active\">\r\n            <div\r\n                // 如果不想要子 element 繼承父 element 的 event\r\n                onClick={event => event.stopPropagation()}\r\n                className=\"ui standard modal visible active\">\r\n                <div className=\"header\">{props.title}</div>\r\n                <div className=\"content\">{props.content}</div>\r\n                <div className=\"actions\">{props.actions}</div>\r\n            </div>\r\n        </div>,\r\n        document.querySelector(\"#modal\")\r\n    )\r\n}\r\n\r\nexport default Modal;","import React, { Component } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { fetchStream, deleteStream } from \"../../actions\"\r\nimport Modal from \"../Modal\"\r\nimport history from \"../../history\"\r\n\r\nclass StreamDelete extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchStream(this.props.match.params.id)\r\n    }\r\n\r\n    renderActions = () => {\r\n        // const id = this.props.match.params.id\r\n        // 改成\r\n        const { id } = this.props.match.params\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <button\r\n                    onClick={() => { this.props.deleteStream(id) }}\r\n                    className=\"ui button negative\">\r\n                    Delete\r\n                </button>\r\n                <Link to=\"/\" className=\"ui button\">Cancel</Link>\r\n            </React.Fragment >\r\n            // 簡寫可寫成:\r\n            // <>\r\n            //   <button>Delete</button>\r\n            //   <button>Cancel</button>\r\n            // </>\r\n        )\r\n    }\r\n\r\n    renderContent() {\r\n        if (!this.props.stream) {\r\n            return `Are you sure you want to delete this stream?`\r\n        }\r\n\r\n        return `Are you sure you want to delete this stream with title: ${this.props.stream.title} ?`\r\n    }\r\n\r\n    render() {\r\n        // 了未來 popup 的 component 可重用，\r\n        // 我們不要在 Modal.js 裡面寫任何死的資料，\r\n        // 我們可以從子 components 傳資料給 popup。\r\n        return (\r\n            <div>\r\n                StreamDelete\r\n            <Modal\r\n                    title=\"Delete Strem\"\r\n                    content={this.renderContent()}\r\n                    actions={this.renderActions()}\r\n                    onDismiss={() => history.push(\"/\")}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        stream: state.streams[ownProps.match.params.id]\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        fetchStream,\r\n        deleteStream\r\n    })(StreamDelete)","import React, { Component } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport flv from \"flv.js\"\r\nimport { fetchStream } from \"../../actions\"\r\n\r\nclass StreamShow extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.videoRef = React.createRef()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchStream(this.props.match.params.id);\r\n        this.buildPlayer();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.buildPlayer();\r\n    }\r\n    // 如果我們離開 stream/:id 頁面，已經看不到直播的狀況下，在本機端停止直播，還是會在 console.log 看到以下訊息：\r\n    // [MSEController] > MediaSource onSourceEnded\r\n    // 這代表了網頁還是與本機直播有連結，網頁上的 video 還是在試著下載直播。\r\n    componentWillUnmount() {\r\n        this.player.destroy();\r\n    }\r\n\r\n    buildPlayer() {\r\n        if (this.player || !this.props.stream) {\r\n            return;\r\n        };\r\n\r\n        const { id } = this.props.match.params;\r\n        this.player = flv.createPlayer({\r\n            type: \"flv\",\r\n            url: `http://localhost:8000/live/${id}.flv`\r\n        });\r\n        this.player.attachMediaElement(this.videoRef.current);\r\n        this.player.load();\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.stream) {\r\n            return (\r\n                <div>\r\n                    Loading...\r\n                </div>\r\n            )\r\n        }\r\n\r\n        const { title, description } = this.props.stream\r\n        return (\r\n            <div>\r\n                <video\r\n                    ref={this.videoRef}\r\n                    style={{ width: \"100%\" }}\r\n                    controls\r\n                />\r\n                <h1>{title}</h1>\r\n                <h5>{description}</h5>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    // console.log(ownProps)\r\n    return {\r\n        stream: state.streams[ownProps.match.params.id]\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchStream })(StreamShow)","import React from \"react\"\r\n// import React-Router \r\nimport { Router, Route, Switch } from \"react-router-dom\"\r\n// import components to App\r\nimport Header from \"./Header\"\r\nimport StreamList from \"./streams/StreamList\"\r\nimport StreamCreate from \"./streams/StreamCreate\"\r\nimport StreamEdit from \"./streams/StreamEdit\"\r\nimport StreamDelete from \"./streams/StreamDelete\"\r\nimport StreamShow from \"./streams/StreamShow\"\r\nimport history from \"../history\"\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"ui container\">\r\n            <Router history={history}>\r\n                <div>\r\n                    <Header />\r\n                    {/* 加入Switch確保只有在第一個Route符合path時才會渲染 */}\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={StreamList} />\r\n                        <Route exact path=\"/streams/new\" component={StreamCreate} />\r\n                        <Route exact path=\"/streams/edit/:id\" component={StreamEdit} />\r\n                        <Route exact path=\"/streams/delete/:id\" component={StreamDelete} />\r\n                        <Route exact path=\"/streams/:id\" component={StreamShow} />\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","import { SIGN_IN, SIGN_OUT } from \"../actions/types\"\r\n\r\nconst INTIAL_STTE = {\r\n    isSignedIn: null,\r\n    userId: null\r\n}\r\n\r\nexport default (state = INTIAL_STTE, action) => {\r\n    switch (action.type) {\r\n        case SIGN_IN:\r\n            // 將isSignedIn更新為true\r\n            return { ...state, isSignedIn: true, userId: action.payload }\r\n        case SIGN_OUT:\r\n            // 將isSignedIn更新為false\r\n            return { ...state, isSignedIn: false, userId: null }\r\n        default:\r\n            return state\r\n    }\r\n}","import _ from \"lodash\"\r\nimport {\r\n    CREATE_STREAM,\r\n    FETCH_STREAMS,\r\n    FETCH_STREAM,\r\n    DELETE_STREAM,\r\n    EDIT_STREAM,\r\n} from \"../actions/types\"\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.type) {\r\n        // Array of records\r\n        // 如果要從一個 array 裡面取特定 key 為 新的 object 的 key，可以運用 lodash 的 _.mapKeys 這樣寫\r\n        case FETCH_STREAMS:\r\n            return { ...state, ..._.mapKeys(action.payload, \"id\") }\r\n        // Single record\r\n        case FETCH_STREAM:\r\n            return { ...state, [action.payload.id]: action.payload }\r\n        case CREATE_STREAM:\r\n            return { ...state, [action.payload.id]: action.payload }\r\n        case EDIT_STREAM:\r\n            return { ...state, [action.payload.id]: action.payload }\r\n        // Nothing\r\n        // 若我們要在 action creator 做 delete 一個 key 可用 lodash 的 _.omit() 方法\r\n        case DELETE_STREAM:\r\n            return _.omit(state, action.payload)\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\n// 避免搞混用as命名為formReducer\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport authReducer from \"./authReducer\";\r\nimport streamReducer from \"./streamReducer\";\r\n// 輸出auth和from給其他元件使用\r\nexport default combineReducers({\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    streams: streamReducer,\r\n})","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { Provider } from \"react-redux\"\r\nimport { createStore, applyMiddleware, compose } from \"redux\"\r\nimport reduxThunk from \"redux-thunk\"\r\n\r\nimport App from \"./components/App\"\r\nimport reducers from \"./reducers\"\r\n\r\n// Redux Dev Tools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// 創建一個store全局管理state和操作\r\nconst store = createStore(\r\n    reducers,\r\n    composeEnhancers(applyMiddleware(reduxThunk))\r\n);\r\n\r\nReactDOM.render(\r\n    //Provider在根組件App外面包一層，App所有子組件就默認可以拿到store\r\n    // 通過組件的props傳遞\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.querySelector(\"#root\")\r\n)\r\n"],"sourceRoot":""}